services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - app-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-init:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - kafka
    entrypoint: ["/bin/sh","-c"]
    networks:
      - app-network
    command: |
      "
      sleep 10
      kafka-topics --create \
        --if-not-exists \
        --topic sms.raw \
        --bootstrap-server kafka:9092 \
        --partitions 3 --replication-factor 1

      kafka-topics --create \
        --if-not-exists \
        --topic sms.filtered \
        --bootstrap-server kafka:9092 \
        --partitions 3 --replication-factor 1

      kafka-topics --create \
        --if-not-exists \
        --topic sms.processed \
        --bootstrap-server kafka:9092 \
        --partitions 3 --replication-factor 1

      kafka-topics --create \
        --if-not-exists \
        --topic consent.state \
        --bootstrap-server kafka:9092 \
        --partitions 3 --replication-factor 1 \
        --config cleanup.policy=compact
      "
      
  sms-ingest:
    build:
      context: ./sms-ingest
    image: kingstiger322/sms-ingest:latest
    depends_on:
      - kafka
    networks:
      - app-network
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SMS_INPUT_TOPIC: sms.raw
    volumes:
      - ./sms-ingest/data:/app/data

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: consent
      POSTGRES_PASSWORD: consent
      POSTGRES_DB: consentdb
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - pgdata:/var/lib/postgresql/data

  consent-service:
    build: ./consent-service
    image: kingstiger322/consent-service:latest
    depends_on:
      - kafka
      - postgres
    networks:
      - app-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/consentdb
      SPRING_DATASOURCE_USERNAME: consent
      SPRING_DATASOURCE_PASSWORD: consent
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8080:8080"

  consent-gate:
    build:
      context: ./consent-gate
      dockerfile: Dockerfile
    image: kingstiger322/consent-gate:latest
    depends_on:
      - kafka
    networks:
      - app-network
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SMS_INPUT_TOPIC: sms.raw
      CONSENT_TOPIC: consent.state
      SMS_FILTERED_TOPIC: sms.filtered

  url-rep:
    build:
      context: ./url-reputation-orchestrator
      dockerfile: Dockerfile
    image: kingstiger322/url-rep:latest
    depends_on:
      - kafka
    networks:
      - app-network
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SMS_FILTERED_TOPIC: sms.filtered

networks:
  app-network:
    driver: bridge
volumes:
  pgdata:
